[@DEPENDENCY]
    [_BUNDLE]Page[#]
    [_CONTENTS]
        [_SCRIPT]
            [_CODE]
            <script>
                Siviglia.Utils.buildClass({
                    context: 'Components',
                    classes: {
                        Tabbar: {
                            inherits: "Siviglia.UI.Expando.View,Siviglia.Dom.EventManager",
                            methods: {
                                constants:
                                    {
                                        TAB_CHANGED:1
                                    },
                                preInitialize:function(params)
                                {

                                    this.tabSource=params.tabSource;
                                    this.tabLabel=params.tabLabel;
                                    this.type=params.type;
                                    this.pathRoot.context.tabLabel=this.tabLabel;
                                    this.tabNodes={};
                                    this.curSelection=null;

                                },
                                getCurrentTab:function()
                                {
                                    return this.curSelection;
                                },
                                setCurrentTab:function(node,params)
                                {
                                    this.curSelection=params.current[this.tabLabel];
                                    this.fireEvent(Components.Tabbar.TAB_CHANGED,{node:node,value:this.curSelection,index:params.idx});
                                },
                                getTabLabel:function(node,params)
                                {
                                    node.html(params.current[this.tabLabel]);
                                    var val=params.current[this.tabLabel];
                                    node.attr("href","#tab-"+val);
                                    node.attr("id","tabLabel-"+val)
                                    if(params.index==0)
                                        node.parent().attr("class",node.attr("class")+" active");

                                },
                                getTabContent:function(node,params)
                                {
                                    var val=params.current[this.tabLabel];
                                    node.attr("id","tab-"+val);
                                    node.attr("aria-labelledby","tabLabel-"+val);
                                    this.tabNodes[params.current[this.tabLabel]]=node;
                                    if(params.index==0)
                                        this.curSelection=val;
                                }
                            }
                        },
                        SelectorOrNew:{
                            inherits: "Siviglia.UI.Expando.View,Siviglia.Dom.EventManager",
                            methods: {
                                preInitialize: function (params) {

                                    this.selectorSource = Siviglia.issetOr(params.url, null);
                                    this.options = params.options;
                                    this.selectorLabel = params.label;
                                    this.selectorValue = params.value;

                                },
                                initialize: function (params) {
                                    var source = null;
                                    var dataAdapter = null;
                                    if (this.selectorSource) {
                                        source =
                                            {
                                                datatype: "json",
                                                /*datafields: [
                                                 { name: this.selectorLabel },
                                                 ],*/
                                                url: this.selectorSource
                                            };
                                        dataAdapter = new $.jqx.dataAdapter(source);
                                    }
                                    else {

                                        dataAdapter = new $.jqx.dataAdapter(
                                            {
                                                datatype:'json',
                                                localData: this.options

                                            }
                                            );

                                    }

                                    this.combo.jqxComboBox(
                                        {
                                            width: 200,
                                            height: 25,
                                            selectionMode: "dropDownList",
                                            source: dataAdapter,
                                            displayMember: this.selectorLabel,
                                            valueMember: this.selectorValue
                                        });
                                    var m = this;
                                    this.combo.on('change', function (event) {
                                        if (event.args) {
                                            var item = event.args.item;
                                            if (item) {
                                                m.fireEvent("ELEMENT_CHANGE", {site: item.value})
                                            }
                                        }
                                    });
                                },
                                onNew: function () {
                                    var val = this.newItem.val();
                                    if (val == "") {
                                        alert("Introduce un nombre de configuracion");
                                        return;
                                    }
                                    this.fireEvent("NEW_ELEMENT", {site: val});
                                }
                            }
                        }
                    }
                });
            </script>
            [#]
        [#]
        [_CSS]
            [_CODE]
            <style type="text/css">
            .miclase {width:100px;font-weight:bold}
            </style>
            [#]
        [#]
    [#]
[#]
<div sivWidget="Components.Tabbar" widgetParams="tabSource,tabLabel,type" widgetCode="Components.Tabbar" role="tabpanel">
    <ul class="nav nav-tabs bar_tabs" role="tablist" data-sivLoop="/*tabSource" data-contextIndex="current">
        <li role="presentation">
            <a role="tab" data-toggle="tab" sivCall="getTabLabel" data-sivParams='{"current":"/@current","index":"/@current-index"}' data-sivEvent="click" data-sivCallback="setCurrentTab"></a>
        </li>
    </ul>
    <div class="tab-content" data-sivLoop="/*tabSource" data-contextIndex="current">
        <div class="tab-pane fade" role="tabpanel" sivCall="getTabContent" data-sivParams='{"current":"/@current"}'>

        </div>
    </div>
</div>


<div sivWidget="Components.Box" class="x_panel">
    <div class="x_title">
        <h2 widgetNode="TITLE"></h2>
        <ul class="nav navbar-right panel_toolbox">
            <li><a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
            </li>
            <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                <ul class="dropdown-menu" role="menu">
                    <li><a href="#">Settings 1</a>
                    </li>
                    <li><a href="#">Settings 2</a>
                    </li>
                </ul>
            </li>
            <li><a class="close-link"><i class="fa fa-close"></i></a>
            </li>
        </ul>
        <div class="clearfix"></div>
    </div>
    <div class="x_content" widgetNode="CONTENT">

    </div>
</div>

<div sivWidget="Components.SelectorOrNew" widgetParams="url,options,label,value" widgetCode="Components.SelectorOrNew">
        <div>
            <div data-sivId="combo" style="float:left">
            </div>
            <div style="float:left;margin-left:30px">
                <div class="form-group">
                    <div style="display:table-cell">
                        <input type="text" class="form-control" style="height:27px" data-sivId="newItem">
                    </div>
                    <div style="display:table-cell;padding-left:5px">
                        <button class="btn btn-primary" style="font-size:12px" data-sivEvent="click" data-sivCallback="onNew">Nuevo</button>
                    </div>
                </div>
            </div>
        </div>
</div>
